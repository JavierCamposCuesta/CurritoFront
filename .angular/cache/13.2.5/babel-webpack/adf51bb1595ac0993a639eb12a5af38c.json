{"ast":null,"code":"import { catchError, map, of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./login.service\";\nimport * as i3 from \"@angular/common/http\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, loginService, http) {\n      this.router = router;\n      this.loginService = loginService;\n      this.http = http;\n    }\n    /**\n     * Método que llama a validarToken del servicio y dependiendo del resultado permitirá o no\n     * la entrada a la siguiente página\n     * @param route\n     * @param state\n     * @returns\n     */\n\n\n    canActivate(route, state) {\n      return this.loginService.validarToken().pipe(map(resp => {\n        return true;\n      }), catchError(err => {\n        this.router.navigateByUrl('/login');\n        return of(false);\n      }));\n    }\n\n    canActivateChild(route, state) {\n      return this.canActivate(route, state);\n    }\n\n    canLoad(route) {\n      return this.loginService.validarToken().pipe(map(resp => {\n        return true;\n      }), catchError(err => {\n        this.router.navigateByUrl('/login');\n        return of(false);\n      }));\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.LoginService), i0.ɵɵinject(i3.HttpClient));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}