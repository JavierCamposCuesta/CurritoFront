{"ast":null,"code":"import { delay, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/**\n * Este servicio será el encargado de hacer todas las validaciones del formulario de registro\n */\n\nexport let ValidatorRegistroService = /*#__PURE__*/(() => {\n  class ValidatorRegistroService {\n    constructor(http) {\n      this.http = http;\n      this.apellidosPattern = '([a-zA-ZñÑ]+) ([a-zA-ZñÑ]+)';\n      this.nombrePattern = '[A-Za-z  ]{1,50}';\n      this.emailPattern = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\";\n      this.telefonoPattern = \"[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]\";\n      this.solucion = \"\";\n    }\n    /**\n     * Este método validará que ambas contraseñas introducidas son iguales\n     * @param campo1 contraseña 1\n     * @param campo2 contraseña 2\n     * @returns\n     */\n\n\n    camposIguales(campo1, campo2) {\n      return formGroup => {\n        var _a, _b, _c, _d;\n\n        const pass1 = (_a = formGroup.get(campo1)) === null || _a === void 0 ? void 0 : _a.value;\n        const pass2 = (_b = formGroup.get(campo2)) === null || _b === void 0 ? void 0 : _b.value;\n\n        if (pass1 !== pass2) {\n          (_c = formGroup.get(campo2)) === null || _c === void 0 ? void 0 : _c.setErrors({\n            noIguales: true\n          });\n          return {\n            noIguales: true\n          };\n        }\n\n        (_d = formGroup.get(campo2)) === null || _d === void 0 ? void 0 : _d.setErrors(null);\n        return null;\n      };\n    }\n    /**\n     * La clase implementa a AsyncValidator por lo que tenemos que sobreescribir el metodo validate,\n     * este método lanzará una petición a la API pasandole un email por parámetro, en caso de que el\n     * email crearemos un nuevo error\n     * @param control Recibe el email que introducimos en el formulario\n     * @returns una promesa la cual asigna un error a email en caso de que este ya se este utilizando\n     */\n\n\n    validate(control) {\n      const email = control.value;\n      let respuesta = \"\";\n      console.log(email);\n      return this.http.get(`http://localhost:8080/usuario?email=${email}`).pipe( //Timpo de respuesta en comprobar el resultado\n      delay(1500), map(resp => {\n        var _a, _b;\n\n        if (resp != null && resp.length == undefined) {\n          respuesta = \"valido\";\n          (_a = control.get(\"email\")) === null || _a === void 0 ? void 0 : _a.setErrors({\n            emailTomado: true\n          });\n          return {\n            emailTomado: true\n          };\n        } else {\n          (_b = control.get(\"email\")) === null || _b === void 0 ? void 0 : _b.setErrors(null);\n          respuesta = \"noValido\";\n          return null;\n        }\n      }));\n    }\n\n  }\n\n  ValidatorRegistroService.ɵfac = function ValidatorRegistroService_Factory(t) {\n    return new (t || ValidatorRegistroService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ValidatorRegistroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ValidatorRegistroService,\n    factory: ValidatorRegistroService.ɵfac,\n    providedIn: 'root'\n  });\n  return ValidatorRegistroService;\n})();","map":null,"metadata":{},"sourceType":"module"}