{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n/* tslint:disable:variable-name */\n\n/**\n * Metadata of the messages sent through the events bus.\n *\n * @author Cristiam Mercado\n * @since 2.0.0\n * @version 4.0.0\n */\n\nclass MetaData {\n  /**\n   * Constructor for this class.\n   *\n   * @param key Original key associated to the message sent through the events bus.\n   * @param [data] Optional: Additional data sent with the message.\n   */\n  constructor(key, data) {\n    this._id = this.uuid();\n    this._key = key;\n    this._data = data;\n    this._timestamp = new Date().getTime();\n  }\n  /**\n   * Gets unique identifier of the message sent through the events bus.\n   */\n\n\n  get id() {\n    return this._id;\n  }\n  /**\n   * Original key associated to the message.\n   */\n\n\n  get key() {\n    return this._key;\n  }\n  /**\n   * Data associated to message. It's optional.\n   */\n\n\n  get data() {\n    return this._data;\n  }\n  /**\n   * Gets the time in milliseconds in which the message was generated.\n   */\n\n\n  get timestamp() {\n    return this._timestamp;\n  }\n  /**\n   * Generates UUID version 4. The solution above uses Math.random() for brevity, however Math.random() is not\n   * guaranteed to be a high-quality RNG.\n   *\n   * @return UUID version 4.\n   */\n\n\n  uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n\n}\n/**\n * Main library class.\n *\n * @author Cristiam Mercado\n * @since 2.0.0\n * @version 4.0.0\n */\n\n\nclass NgEventBus {\n  /**\n   * Constructor for this class: Initializes event bus.\n   */\n  constructor() {\n    /**\n     * Key message separator.\n     */\n    this.separator = ':';\n    this.eventBus = new Subject();\n  }\n  /**\n   * Validates key matching.\n   *\n   * @param  key Key to identify the message/event.\n   * @param wildcard Wildcard received from on method.\n   *\n   * @return true if key matches, false otherwise.\n   */\n\n\n  keyMatch(key, wildcard) {\n    const w = '*';\n    const ww = '**';\n\n    const partMatch = (wl, k) => {\n      return wl === w || wl === k;\n    };\n\n    const sep = this.separator;\n    const kArr = key.split(sep);\n    const wArr = wildcard.split(sep);\n    const kLen = kArr.length;\n    const wLen = wArr.length;\n    const max = Math.max(kLen, wLen);\n\n    for (let i = 0; i < max; i++) {\n      const cK = kArr[i];\n      const cW = wArr[i];\n\n      if (cW === ww && typeof cK !== 'undefined') {\n        return true;\n      }\n\n      if (!partMatch(cW, cK)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Publish a message/event to event bus.\n   *\n   * @param  key Key to identify the message/event.\n   * @param  [data] Optional: Additional data sent with the message/event.\n   * @throws {Error} key parameter must be a string and must not be empty.\n   */\n\n\n  cast(key, data) {\n    if (!key.trim().length) {\n      throw new Error('key parameter must be a string and must not be empty');\n    }\n\n    const metadata = new MetaData(key, data);\n    this.eventBus.next({\n      key,\n      data,\n      metadata\n    });\n  }\n  /**\n   * Returns an observable you can subscribe to listen messages/events.\n   *\n   * @param key Key to identify the message/event.\n   *\n   * @return Observable you can subscribe to listen messages/events.\n   */\n\n\n  on(key) {\n    return this.eventBus.asObservable().pipe(filter(event => this.keyMatch(event.key, key)), map(event => event.metadata));\n  }\n\n}\n/*\n * Public API Surface of ng-event-bus\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgEventBus }; //# sourceMappingURL=ng-event-bus.mjs.map","map":null,"metadata":{},"sourceType":"module"}